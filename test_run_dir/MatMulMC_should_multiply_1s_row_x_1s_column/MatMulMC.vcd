$date
2024-03-01T20:57+0000
$end
$version
0.2
$end
$comment

$end
$timescale 1ns  $end
$scope module MatMulMC $end
 $var wire 1 ! stateLoadMatrices $end
 $var wire 1 " inputReady $end
 $var wire 32 # matrixAInternal_0_0 $end
 $var wire 1 $ colIdx $end
 $var wire 32 % matrixAInternal_0_1 $end
 $var wire 32 & matrixAInternal_0_2 $end
 $var wire 32 ' matrixAInternal_0_3 $end
 $var wire 32 ( matrixBInternal_0_0 $end
 $var wire 32 ) resultMatrix_0_0 $end
 $var wire 32 * io_in_bits_bBlock_0 $end
 $var wire 3 + loadCounterA $end
 $var wire 3 , loadCounterB $end
 $var wire 1 - loadCounterC $end
 $var wire 1 . rowCounter $end
 $var wire 32 / matrixBInternal_2_0 $end
 $var wire 32 0 io_outBlock_bits_0 $end
 $var wire 3 1 colAIdx $end
 $var wire 32 2 matrixBInternal_1_0 $end
 $var wire 1 3 io_in_ready $end
 $var wire 1 4 outputValid $end
 $var wire 32 5 io_in_bits_aBlock_0 $end
 $var wire 1 6 reset $end
 $var wire 1 7 colCounter $end
 $var wire 1 8 io_in_valid $end
 $var wire 1 9 io_outBlock_valid $end
 $var wire 64 : product $end
 $var wire 32 ; matrixBInternal_3_0 $end
 $var wire 3 < rowBIdx $end
 $var wire 1 = stateOutputting $end
 $var wire 3 > innerCounter $end
 $var wire 1 ? stateMultiplying $end
 $var wire 1 @ stateIdle $end
 $var wire 3 A currIndB $end
 $var wire 1 B clock $end
 $var wire 3 C currIndA $end
$upscope $end
$enddefinitions $end
$dumpvars
b00000000000000000000000000000000 *
03
b000 C
04
b00000000000000000000000000000000 '
b00000000000000000000000000000000 &
06
b0000000000000000000000000000000000000000000000000000000000000000 :
b00000000000000000000000000000000 )
07
b00000000000000000000000000000000 (
08
b00000000000000000000000000000000 #
09
b00000000000000000000000000000000 %
0=
0?
0@
b00000000000000000000000000000000 ;
0B
b000 >
b00000000000000000000000000000000 2
b000 A
b00000000000000000000000000000000 5
b00000000000000000000000000000000 /
b000 <
b00000000000000000000000000000000 0
b000 1
b000 +
b000 ,
0!
0"
0$
0-
0.
$end
#0
16
#1
1@
1"
1B
13
#6
0B
06
18
#11
0@
1!
1B
#16
0B
b00000000000000000000000000000001 5
b00000000000000000000000000000001 *
#21
b001 1
b001 A
1B
b00000000000000000000000000000001 #
b001 C
b00000000000000000000000000000001 (
b0000000000000000000000000000000000000000000000000000000000000001 :
b001 +
b001 ,
b001 <
#26
0B
#31
b010 1
b010 A
b00000000000000000000000000000001 2
1B
b010 C
b00000000000000000000000000000001 %
b010 +
b010 ,
b010 <
#36
0B
#41
b011 1
b011 A
1B
b011 C
b00000000000000000000000000000001 &
b011 +
b011 ,
b011 <
b00000000000000000000000000000001 /
#46
0B
#51
0!
b100 A
0"
1B
b100 C
b00000000000000000000000000000001 '
b100 +
b100 ,
b000 1
03
b00000000000000000000000000000001 ;
b100 <
1?
#56
0B
08
#61
1B
b00000000000000000000000000000001 )
b001 >
#66
0B
#71
1B
b00000000000000000000000000000010 )
b010 >
#76
0B
#81
1B
b00000000000000000000000000000011 )
b011 >
#86
0B
#91
b00000000000000000000000000000100 0
1B
14
b00000000000000000000000000000100 )
19
1=
b000 >
0?
#96
0B
#101
b00000000000000000000000000000000 0
1@
1"
1B
13
04
09
1-
0=
#106
0B
b00000000000000000000000000000000 5
b00000000000000000000000000000000 *
