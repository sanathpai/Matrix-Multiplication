$date
2024-03-01T20:57+0000
$end
$version
0.2
$end
$comment

$end
$timescale 1ns  $end
$scope module MatMulSC $end
 $var wire 32 ! bReg_3_0 $end
 $var wire 32 " io_out_bits_1_0 $end
 $var wire 32 # io_in_bits_a_1_0 $end
 $var wire 32 $ io_in_bits_a_1_1 $end
 $var wire 32 % io_in_bits_a_1_2 $end
 $var wire 32 & io_in_bits_a_1_3 $end
 $var wire 32 ' aReg_0_0 $end
 $var wire 32 ( bReg_2_0 $end
 $var wire 32 ) aReg_0_2 $end
 $var wire 32 * aReg_0_1 $end
 $var wire 32 + aReg_0_3 $end
 $var wire 32 , io_out_bits_0_0 $end
 $var wire 32 - io_in_bits_a_2_3 $end
 $var wire 32 . io_in_bits_a_2_0 $end
 $var wire 32 / io_in_bits_a_2_1 $end
 $var wire 32 0 io_in_bits_a_2_2 $end
 $var wire 3 1 kCounter $end
 $var wire 32 2 io_in_bits_b_0_0 $end
 $var wire 1 3 computeDone $end
 $var wire 32 4 bReg_1_0 $end
 $var wire 3 5 rowCounter $end
 $var wire 32 6 bReg_0_0 $end
 $var wire 1 7 io_in_ready $end
 $var wire 32 8 io_in_bits_a_0_0 $end
 $var wire 32 9 io_in_bits_a_0_1 $end
 $var wire 32 : io_in_bits_a_0_2 $end
 $var wire 32 ; io_in_bits_a_0_3 $end
 $var wire 32 < io_in_bits_b_2_0 $end
 $var wire 1 = io_out_valid $end
 $var wire 32 > cReg_3_0 $end
 $var wire 32 ? aReg_3_1 $end
 $var wire 32 @ aReg_3_0 $end
 $var wire 32 A aReg_3_3 $end
 $var wire 32 B aReg_3_2 $end
 $var wire 1 C reset $end
 $var wire 1 D colCounter $end
 $var wire 1 E io_in_valid $end
 $var wire 32 F io_in_bits_b_1_0 $end
 $var wire 32 G cReg_2_0 $end
 $var wire 1 H colIndex $end
 $var wire 64 I product $end
 $var wire 32 J cReg_1_0 $end
 $var wire 32 K aReg_1_1 $end
 $var wire 32 L aReg_1_0 $end
 $var wire 32 M aReg_1_3 $end
 $var wire 32 N aReg_1_2 $end
 $var wire 32 O io_out_bits_3_0 $end
 $var wire 32 P io_in_bits_a_3_3 $end
 $var wire 32 Q io_in_bits_a_3_2 $end
 $var wire 1 R clock $end
 $var wire 32 S io_in_bits_a_3_1 $end
 $var wire 32 T io_in_bits_a_3_0 $end
 $var wire 32 U io_in_bits_b_3_0 $end
 $var wire 1 V computing $end
 $var wire 32 W aReg_2_0 $end
 $var wire 32 X cReg_0_0 $end
 $var wire 32 Y aReg_2_2 $end
 $var wire 32 Z aReg_2_1 $end
 $var wire 32 [ aReg_2_3 $end
 $var wire 32 \ io_out_bits_2_0 $end
$upscope $end
$enddefinitions $end
$dumpvars
b00000000000000000000000000000000 +
b00000000000000000000000000000000 *
b00000000000000000000000000000000 -
03
b00000000000000000000000000000000 ,
b00000000000000000000000000000000 '
b00000000000000000000000000000000 &
b00000000000000000000000000000000 )
07
b00000000000000000000000000000000 (
b00000000000000000000000000000000 #
b00000000000000000000000000000000 "
b00000000000000000000000000000000 %
b00000000000000000000000000000000 $
0=
b00000000000000000000000000000000 !
b00000000000000000000000000000000 ;
b00000000000000000000000000000000 :
0C
b00000000000000000000000000000000 <
0D
0E
b00000000000000000000000000000000 6
b00000000000000000000000000000000 9
b00000000000000000000000000000000 8
0H
b00000000000000000000000000000000 2
b00000000000000000000000000000000 4
b00000000000000000000000000000000 /
b00000000000000000000000000000000 .
b00000000000000000000000000000000 0
0R
0V
b000 5
b00000000000000000000000000000000 K
b00000000000000000000000000000000 J
b00000000000000000000000000000000 M
b00000000000000000000000000000000 L
b00000000000000000000000000000000 G
b00000000000000000000000000000000 F
b00000000000000000000000000000000 B
b000 1
b00000000000000000000000000000000 ?
b00000000000000000000000000000000 >
b00000000000000000000000000000000 A
b00000000000000000000000000000000 @
b00000000000000000000000000000000 [
b0000000000000000000000000000000000000000000000000000000000000000 I
b00000000000000000000000000000000 Z
b00000000000000000000000000000000 \
b00000000000000000000000000000000 W
b00000000000000000000000000000000 Y
b00000000000000000000000000000000 X
b00000000000000000000000000000000 S
b00000000000000000000000000000000 U
b00000000000000000000000000000000 T
b00000000000000000000000000000000 O
b00000000000000000000000000000000 N
b00000000000000000000000000000000 Q
b00000000000000000000000000000000 P
$end
#0
1C
17
#1
1R
#6
b00000000000000000000000000000001 0
b00000000000000000000000000000001 P
b00000000000000000000000000000001 2
0R
0C
b00000000000000000000000000000001 $
1E
b00000000000000000000000000000001 U
b00000000000000000000000000000001 F
b00000000000000000000000000000001 8
b00000000000000000000000000000001 <
#11
b00000000000000000000000000000001 !
b00000000000000000000000000000001 A
b00000000000000000000000000000001 '
b00000000000000000000000000000001 (
b0000000000000000000000000000000000000000000000000000000000000001 I
b00000000000000000000000000000001 K
1R
b00000000000000000000000000000001 4
b00000000000000000000000000000001 6
1V
07
b00000000000000000000000000000001 Y
#16
0R
#21
b001 1
1R
b00000000000000000000000000000001 X
b0000000000000000000000000000000000000000000000000000000000000000 I
b00000000000000000000000000000001 ,
#26
0R
#31
b010 1
1R
#36
0R
#41
b011 1
1R
#46
0R
#51
b000 1
1R
b001 5
#56
0R
#61
b001 1
1R
b0000000000000000000000000000000000000000000000000000000000000001 I
#66
0R
#71
b010 1
b00000000000000000000000000000001 "
1R
b0000000000000000000000000000000000000000000000000000000000000000 I
b00000000000000000000000000000001 J
#76
0R
#81
b011 1
1R
#86
0R
#91
b000 1
1R
b010 5
#96
0R
#101
b001 1
1R
#106
0R
#111
b010 1
1R
b0000000000000000000000000000000000000000000000000000000000000001 I
#116
0R
#121
b011 1
1R
b00000000000000000000000000000001 G
b0000000000000000000000000000000000000000000000000000000000000000 I
b00000000000000000000000000000001 \
#126
0R
#131
b000 1
1R
b011 5
#136
0R
#141
b001 1
1R
#146
0R
#151
b010 1
1R
#156
0R
#161
b011 1
1R
b0000000000000000000000000000000000000000000000000000000000000001 I
#166
0R
#171
b000 1
1R
13
0V
17
b0000000000000000000000000000000000000000000000000000000000000000 I
1=
b00000000000000000000000000000001 >
b00000000000000000000000000000001 O
#176
b00000000000000000000000000000000 0
b00000000000000000000000000000000 P
b00000000000000000000000000000000 2
0R
b00000000000000000000000000000000 $
0E
b00000000000000000000000000000000 U
b00000000000000000000000000000000 F
b00000000000000000000000000000000 8
b00000000000000000000000000000000 <
